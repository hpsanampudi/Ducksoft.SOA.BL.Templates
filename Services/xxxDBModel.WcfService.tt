<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ assembly name="System.Data.Entity.Design" #>
<#@ import namespace="System.Data.Entity.Design.PluralizationServices" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.IO" #>
<#@ include file="EF6.Utility.CS.ttinclude"#><#@ 
 output extension=".cs"#><#



//This file is made by cloning and customizing the original T4 file from EntityFramework
//AdventureWorksModel.tt




//Specify values for the constant below to drive the generation of 
//the automatically generated file "EntityInterfaceGenerator.IEntities.cs"
var code = new CodeGenerationTools(this);
string codeNamespace = code.VsNamespaceSuggestion();

//const string appName = "xxx";
const string appName = "";

const string dbName = "xxxDB";
//const string dbName = "";

//string wcfServiceName = $"{appName}Service";
string wcfServiceName = "";

//const string adaptorNamespace = "xxx.SOA.Adaptor.xxx";
const string adaptorNamespace = "";

//const string commonNamespace = "Ducksoft.SOA.Common";
const string commonNamespace = "";

//const string databaseNamespace = "xxx.SOA.DAL.xxxDB";
const string databaseNamespace = "";

string projectNamespace = codeNamespace.Substring(0, codeNamespace.LastIndexOf('.'));
//string projectNamespace = "";

//const string edmxModelName = "xxxcrudModel";
const string edmxModelName = "";

//string branchPath = new DirectoryInfo(Host.ResolvePath(@"..\\..")).FullName;
//string branchName = Path.GetFileName(branchPath);
//string componentPath = Path.GetDirectoryName(branchPath);
//string tfsMappedPath = Path.GetDirectoryName(componentPath);
//string edmxProjectPath = Path.Combine(tfsMappedPath, "DAL", branchName);
//string inputFile = Path.Combine(edmxProjectPath, $@"{databaseNamespace}\Models\{edmxModelName}.edmx");

//string inputFile = $@"..\..\{databaseNamespace}\Models\{edmxModelName}.edmx";
string inputFile = @"";




//Specify same attributes for all entity interfaces
const string attributesToAddToAll = ""; //you can specify any attributes as your design requires.
string[] extraUsings = new string[] {"SwaggerWcf.Attributes", "System.ServiceModel", "System.ServiceModel.Activation", 
	$"{databaseNamespace}.Models", $"DTO = {adaptorNamespace}.DataModels", $"{projectNamespace}.Models",
	$"{adaptorNamespace}.Contracts.Wcf", $"{adaptorNamespace}.Contracts.Rest", $"{commonNamespace}.DataContracts",
	$"{commonNamespace}.EFHelpers.Interfaces", $"{commonNamespace}.Helpers", $"{commonNamespace}.Handlers",
	$"{commonNamespace}.MessageHeaders"}; //or: extraUsings = null;


var textTransform = DynamicTextTransformation.Create(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
var itemCollection = new EdmMetadataLoader(textTransform.Host, textTransform.Errors).CreateEdmItemCollection(inputFile);
var pluralizer = PluralizationService.CreateService(System.Globalization.CultureInfo.CurrentCulture);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef, pluralizer);

if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), inputFile))
{
    return string.Empty;
}

WriteHeader(codeStringGenerator, fileManager);
BeginNamespace(code, codeNamespace);
#>
<#=codeStringGenerator.UsingDirectives(inHeader: false)#><#=codeStringGenerator.ExtraUsingDirectives(extraUsings)#>
<#=codeStringGenerator.EntityClassComments(null, appName)#>
[JSONPSupportBehavior, CustMsgHeaderBehavior, GlobalWcfErrorHandler]
[ServiceBehavior(ConcurrencyMode = ConcurrencyMode.Multiple,
    InstanceContextMode = InstanceContextMode.PerCall, IncludeExceptionDetailInFaults = true)]
[AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]
[SwaggerWcf("/rest/web")]
public partial class <#=appName#>Service : I<#=appName#>WcfService, I<#=appName#>RestService
{
    /// <summary>
    /// The <#=appName#> business model
    /// </summary>
    private readonly I<#=appName#>Model model;

    /// <summary>
    /// The database model for performing raw CRUD operations
    /// </summary>
    private readonly IMapEntityModel<<#=dbName#>Entities, int> crudModel;

    /// <summary>
    /// Initializes a new instance of the <see cref="<#=appName#>Service" /> class.
    /// </summary>
    /// <param name="model">The core model.</param>
    /// <param name="crudModel">The database CRUD model.</param>
    /// <returns></returns>
    public <#=appName#>Service(I<#=appName#>Model model, IMapEntityModel<<#=dbName#>Entities, int> crudModel)
    {
        this.model = model;
        this.crudModel = crudModel;
    }
}

<#
foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
    //fileManager.StartNewFile(entity.Name + ".cs");
#>
<#=codeStringGenerator.EntityClassComments(entity, appName)#><#=codeStringGenerator.EntityCommonAttributes(entity, attributesToAddToAll)#>
<#=codeStringGenerator.EntityClassOpening(entity, wcfServiceName)#>
{	
	<#=codeStringGenerator.EntityCreateRecord(entity)#>

	<#=codeStringGenerator.EntityGetAllRecords(entity)#>

	<#=codeStringGenerator.EntityGetSingleRecord(entity)#>

	<#=codeStringGenerator.EntityUpdateRecord(entity)#>

	<#=codeStringGenerator.EntityDeleteRecord(entity)#>

	<#=codeStringGenerator.EntityDeleteRecordBy(entity)#>

	<#=codeStringGenerator.EntityPurgeRecord(entity)#>

	<#=codeStringGenerator.EntityPurgeRecordBy(entity)#>
}

<#
}

EndNamespace(code, codeNamespace);

fileManager.Process();

#>
<#+

public void WriteHeader(CodeStringGenerator codeStringGenerator, EntityFrameworkTemplateFileManager fileManager)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------
<#=codeStringGenerator.UsingDirectives(inHeader: true)#>
<#+
    fileManager.EndBlock();
}

public void BeginNamespace(CodeGenerationTools code, string codeNamespace)
{
    codeNamespace = codeNamespace?.Trim() ?? code.VsNamespaceSuggestion();
    if (!String.IsNullOrWhiteSpace(codeNamespace))
    {
#>
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#+
        PushIndent("    ");
    }
}

public void EndNamespace(CodeGenerationTools code, string codeNamespace)
{
	codeNamespace = codeNamespace?.Trim() ?? code.VsNamespaceSuggestion();
    if (!String.IsNullOrWhiteSpace(codeNamespace))
    {
        PopIndent();
#>
}
<#+
    }
}

public const string TemplateId = "CSharp_DbContext_Types_EF6";

public class CodeStringGenerator
{
    private readonly CodeGenerationTools _code;
    private readonly TypeMapper _typeMapper;
    private readonly MetadataTools _ef;
	private readonly PluralizationService _pluralizer;

    public CodeStringGenerator(CodeGenerationTools code, TypeMapper typeMapper, MetadataTools ef, PluralizationService pluralizer)
    {
        ArgumentNotNull(code, "code");
        ArgumentNotNull(typeMapper, "typeMapper");
        ArgumentNotNull(ef, "ef");
		ArgumentNotNull(pluralizer, "pluralizer");

        _code = code;
        _typeMapper = typeMapper;
        _ef = ef;
		_pluralizer = pluralizer;
    }

    public string EntityCommonAttributes(EntityType entity, string attributesToAddToAll)
    {
        if (string.IsNullOrEmpty(attributesToAddToAll)) return string.Empty;
        return attributesToAddToAll;
    }

    public string EntityClassOpening(EntityType entity, string wcfServiceName)
    {
		var interfaceToInherit = string.Format(CultureInfo.InvariantCulture,
			"IWcf{0}Service, IRest{0}Service", _code.Escape(entity));

        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} partial class {1} {2}",
            Accessibility.ForType(entity),
			wcfServiceName,
            _code.StringBefore(": ", interfaceToInherit));
    }

	public string EntityClassComments(EntityType entity, string appName)
	{	
		var entityName = (entity != null) ? (_code.Escape(entity) + " ") : string.Empty;		
		var description = $"Class which holds the implementation of contracts exposed by {appName} {entityName}service.";
		var comments = string.Join((Environment.NewLine + "///"), "/// <summary>", description, "</summary>");
		return (comments);
	}

	public string EntityCreateRecord(EntityType entity)
	{
		var description = "Creates the "+ _code.Escape(entity) +" record.";
		var comments = string.Join((Environment.NewLine + "	///"), "/// <summary>", description, "</summary>");		
        var methodSignature = string.Format(
            CultureInfo.InvariantCulture,
            "	public int CreateRecord(DTO.{0} recordToCreate)",
            _code.Escape(entity));
		
		var methodBody = string.Format(
            CultureInfo.InvariantCulture,
			"		return (crudModel.Create<DTO.{0}, {0}, int>(recordToCreate));",
			_code.Escape(entity));

		return string.Join(Environment.NewLine, comments, methodSignature, "	{", methodBody, "	}");
	}

	public string EntityGetAllRecords(EntityType entity)
	{
		var description = "Gets all "+ _code.Escape(entity) +" records.";
		var comments = string.Join((Environment.NewLine + "	///"), "/// <summary>", description, "</summary>");
        var methodSignature = string.Format(
            CultureInfo.InvariantCulture,
            "	public PaginationData<DTO.{0}> GetAll{1}(List<QueryOption> queryOptions)",
            _code.Escape(entity), _pluralizer.Pluralize(_code.Escape(entity)));
		
		var methodBody = string.Format(
            CultureInfo.InvariantCulture,
			"		return (crudModel.GetPageData<DTO.{0}, {0}>(queryOptions));",
			_code.Escape(entity));

		return string.Join(Environment.NewLine, comments, methodSignature, "	{", methodBody, "	}");
	}

	public string EntityGetSingleRecord(EntityType entity)
	{
		var description = "Gets the single "+ _code.Escape(entity) +" record.";
		var comments = string.Join((Environment.NewLine + "	///"), "/// <summary>", description, "</summary>");
        var methodSignature = string.Format(
            CultureInfo.InvariantCulture,
            "	public DTO.{0} GetSingle{0}(string odataFilterExpression)",
            _code.Escape(entity));

		var methodBody = string.Format(
            CultureInfo.InvariantCulture,
			"		return (crudModel.GetSingleOrDefault<DTO.{0}, {0}>(odataFilterExpression));",
			_code.Escape(entity));

		return string.Join(Environment.NewLine, comments, methodSignature, "	{", methodBody, "	}");
	}
    
	public string EntityUpdateRecord(EntityType entity)
	{
		var description = "Updates the "+ _code.Escape(entity) +" record.";
		var comments = string.Join((Environment.NewLine + "	///"), "/// <summary>", description, "</summary>");
        var methodSignature = string.Format(
            CultureInfo.InvariantCulture,
            "	public int UpdateRecord(DTO.{0} recordToUpdate)",
            _code.Escape(entity));
		
		var methodBody = string.Format(
            CultureInfo.InvariantCulture,
			"		return (crudModel.Update<DTO.{0}, {0}, int>(recordToUpdate));",
			_code.Escape(entity));

		return string.Join(Environment.NewLine, comments, methodSignature, "	{", methodBody, "	}");
	}

	public string EntityDeleteRecord(EntityType entity)
	{
		var description = "Deletes the "+ _code.Escape(entity) +" record.";
		var comments = string.Join((Environment.NewLine + "	///"), "/// <summary>", description, "</summary>");
        var methodSignature = string.Format(
            CultureInfo.InvariantCulture,
            "	public int DeleteRecord(DTO.{0} recordToDelete)",
            _code.Escape(entity));

		var methodBody = string.Format(
            CultureInfo.InvariantCulture,
			"		return (crudModel.Delete<DTO.{0}, {0}, int>(recordToDelete));",
			_code.Escape(entity));

		return string.Join(Environment.NewLine, comments, methodSignature, "	{", methodBody, "	}");
	}

	public string EntityDeleteRecordBy(EntityType entity)
	{
		var description = "Deletes the database record by given OData filter expression.";
		var comments = string.Join((Environment.NewLine + "	///"), "/// <summary>", description, "</summary>");
        var methodSignature = string.Format(
            CultureInfo.InvariantCulture,
            "	public int Delete{0}By(string odataFilterExpression, int userId)",
            _code.Escape(entity));

		var methodBody = string.Format(
            CultureInfo.InvariantCulture,
			"		return (crudModel.Delete<{0}, int>(odataFilterExpression, userId));",
			_code.Escape(entity));

		return string.Join(Environment.NewLine, comments, methodSignature, "	{", methodBody, "	}");
	}

	public string EntityPurgeRecord(EntityType entity)
	{
		var description = "Purges the "+ _code.Escape(entity) +" record.";
		var comments = string.Join((Environment.NewLine + "	///"), "/// <summary>", description, "</summary>");
        var methodSignature = string.Format(
            CultureInfo.InvariantCulture,
            "	public bool PurgeRecord(DTO.{0} recordToPurge)",
            _code.Escape(entity));

		var methodBody = string.Format(
            CultureInfo.InvariantCulture,
			"		return (crudModel.Purge<DTO.{0}, {0}, int>(recordToPurge));",
			_code.Escape(entity));

		return string.Join(Environment.NewLine, comments, methodSignature, "	{", methodBody, "	}");
	}

	public string EntityPurgeRecordBy(EntityType entity)
	{
		var description = "Purge the database record by given OData filter expression.";
		var comments = string.Join((Environment.NewLine + "	///"), "/// <summary>", description, "</summary>");
        var methodSignature = string.Format(
            CultureInfo.InvariantCulture,
            "	public bool Purge{0}By(string odataFilterExpression)",
            _code.Escape(entity));

		var methodBody = string.Format(
            CultureInfo.InvariantCulture,
			"		return (crudModel.Purge<{0}, int>(odataFilterExpression));",
			_code.Escape(entity));

		return string.Join(Environment.NewLine, comments, methodSignature, "	{", methodBody, "	}");
	}

    public string UsingDirectives(bool inHeader, bool includeCollections = true)
    {
        return inHeader == string.IsNullOrEmpty(_code.VsNamespaceSuggestion())
            ? string.Format(
                CultureInfo.InvariantCulture,
                "{0}using System;{1}",
                inHeader ? Environment.NewLine : "",
                includeCollections ? (Environment.NewLine + "using System.Collections.Generic;") : "")
            : "";
    }

	public string ExtraUsingDirectives(string[] extraUsings)
    {
        if (extraUsings == null) return string.Empty;
		var sb = new StringBuilder();
		foreach (var extraUsing in extraUsings)
		{
			sb.AppendFormat(
                "{0}using {1};" ,
                Environment.NewLine, extraUsing);
		}
		sb.AppendLine();
		return sb.ToString();
    }
}

public class TypeMapper
{
    private const string ExternalTypeNameAttributeName = @"http://schemas.microsoft.com/ado/2006/04/codegeneration:ExternalTypeName";

    private readonly System.Collections.IList _errors;
    private readonly CodeGenerationTools _code;
    private readonly MetadataTools _ef;

    public TypeMapper(CodeGenerationTools code, MetadataTools ef, System.Collections.IList errors)
    {
        ArgumentNotNull(code, "code");
        ArgumentNotNull(ef, "ef");
        ArgumentNotNull(errors, "errors");

        _code = code;
        _ef = ef;
        _errors = errors;
    }

    public static string FixNamespaces(string typeName)
    {
        return typeName.Replace("System.Data.Spatial.", "System.Data.Entity.Spatial.");
    }

    public string GetTypeName(TypeUsage typeUsage)
    {
        return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace: null);
    }

    public string GetTypeName(EdmType edmType)
    {
        return GetTypeName(edmType, isNullable: null, modelNamespace: null);
    }

    public string GetTypeName(TypeUsage typeUsage, string modelNamespace)
    {
        return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace);
    }

    public string GetTypeName(EdmType edmType, string modelNamespace)
    {
        return GetTypeName(edmType, isNullable: null, modelNamespace: modelNamespace);
    }

    public string GetTypeName(EdmType edmType, bool? isNullable, string modelNamespace)
    {
        if (edmType == null)
        {
            return null;
        }

        var collectionType = edmType as CollectionType;
        if (collectionType != null)
        {
            return String.Format(CultureInfo.InvariantCulture, "Collection<{0}>", GetTypeName(collectionType.TypeUsage, modelNamespace));
        }

        var typeName = _code.Escape(edmType.MetadataProperties
                                .Where(p => p.Name == ExternalTypeNameAttributeName)
                                .Select(p => (string)p.Value)
                                .FirstOrDefault())
            ?? (modelNamespace != null && edmType.NamespaceName != modelNamespace ?
                _code.CreateFullName(_code.EscapeNamespace(edmType.NamespaceName), _code.Escape(edmType)) :
                _code.Escape(edmType));

        if (edmType is StructuralType)
        {
            return typeName;
        }

        if (edmType is SimpleType)
        {
            var clrType = UnderlyingClrType(edmType);
            if (!IsEnumType(edmType))
            {
                typeName = _code.Escape(clrType);
            }

            typeName = FixNamespaces(typeName);

            return clrType.IsValueType && isNullable == true ?
                String.Format(CultureInfo.InvariantCulture, "Nullable<{0}>", typeName) :
                typeName;
        }

        throw new ArgumentException("edmType");
    }
    
    public Type UnderlyingClrType(EdmType edmType)
    {
        ArgumentNotNull(edmType, "edmType");

        var primitiveType = edmType as PrimitiveType;
        if (primitiveType != null)
        {
            return primitiveType.ClrEquivalentType;
        }

        if (IsEnumType(edmType))
        {
            return GetEnumUnderlyingType(edmType).ClrEquivalentType;
        }

        return typeof(object);
    }

    public bool IsEnumType(GlobalItem edmType)
    {
        ArgumentNotNull(edmType, "edmType");

        return edmType.GetType().Name == "EnumType";
    }

    public PrimitiveType GetEnumUnderlyingType(EdmType enumType)
    {
        ArgumentNotNull(enumType, "enumType");

        return (PrimitiveType)enumType.GetType().GetProperty("UnderlyingType").GetValue(enumType, null);
    }

    public bool VerifyCaseInsensitiveTypeUniqueness(IEnumerable<string> types, string sourceFile)
    {
        ArgumentNotNull(types, "types");
        ArgumentNotNull(sourceFile, "sourceFile");
        
        var hash = new HashSet<string>(StringComparer.InvariantCultureIgnoreCase);
        if (types.Any(item => !hash.Add(item)))
        {
            _errors.Add(
                new CompilerError(sourceFile, -1, -1, "6023",
                    String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("Template_CaseInsensitiveTypeConflict"))));
            return false;
        }
        return true;
    }    
   
    public IEnumerable<T> GetItemsToGenerate<T>(IEnumerable<GlobalItem> itemCollection) where T: EdmType
    {
        return itemCollection
            .OfType<T>()
            .Where(i => !i.MetadataProperties.Any(p => p.Name == ExternalTypeNameAttributeName))
            .OrderBy(i => i.Name);
    }

	public string GetAllItemsToInherit<T>(IEnumerable<GlobalItem> itemCollection) where T: EdmType
    {
        return string.Join(",", GetItemsToGenerate<T>(itemCollection)
            .Select(i => string.Format(CultureInfo.InvariantCulture, 
			"{0}	IWcf{1}Service", Environment.NewLine, i.Name)));
	}

    public IEnumerable<string> GetAllGlobalItems(IEnumerable<GlobalItem> itemCollection)
    {
        return itemCollection
            .Where(i => i is EntityType || i is ComplexType || i is EntityContainer || IsEnumType(i))
            .Select(g => GetGlobalItemName(g));
    }

    public string GetGlobalItemName(GlobalItem item)
    {
        if (item is EdmType)
        {
            return ((EdmType)item).Name;
        }
        else
        {
            return ((EntityContainer)item).Name;
        }
    }
}

public static void ArgumentNotNull<T>(T arg, string name) where T : class
{
    if (arg == null)
    {
        throw new ArgumentNullException(name);
    }
}
#>
