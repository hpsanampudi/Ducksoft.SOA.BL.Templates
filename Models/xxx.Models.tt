<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".cs" #>

<#
var code = new CodeGenerationTools(this);
string codeNamespace = code.VsNamespaceSuggestion();

const string appName = "xxx";
//const string appName = "";

const string dbName = "xxxDB";
//const string dbName = "";

const string commonNamespace = "Ducksoft.SOA.Common";
//const string commonNamespace = "";

string projectNamespace = codeNamespace.Substring(0, codeNamespace.LastIndexOf('.'));
//string projectNamespace = "";

string[] extraUsings = new string[]{$"{commonNamespace}.Contracts", $"{projectNamespace}.Repositories"}; //or: extraUsings = null;

WriteHeader();
BeginNamespace(code, codeNamespace);
#>
<#=ExtraUsingDirectives(extraUsings)#>
/// <summary>
/// Interface which is used to handle <#=appName#> data.
/// </summary>
public partial interface I<#=appName#>Model
{	
}

/// <summary>
/// Class which used to handle <#=appName#> data.
/// </summary>
public partial class <#=appName#>Model : I<#=appName#>Model
{
    /// <summary>
    /// The <#=dbName#> repository
    /// </summary>
    private readonly I<#=dbName#>Repository <#=dbName.ToLower()#>Repository;

    /// <summary>
    /// The logger
    /// </summary>
    private readonly ILoggingService logger;	

    /// <summary>
    /// Initializes a new instance of the <see cref="<#=appName#>Model" /> class.
    /// </summary>
    /// <param name="<#=dbName.ToLower()#>Repository">The <#=dbName#> repository.</param>
    /// <param name="logger">The logger.</param>
    public <#=appName#>Model(I<#=dbName#>Repository <#=dbName.ToLower()#>Repository, ILoggingService logger)
    {
        this.<#=dbName.ToLower()#>Repository = <#=dbName.ToLower()#>Repository;
        this.logger = logger;
    }
}
<#
EndNamespace(code, codeNamespace);
#>

<#+
public void WriteHeader()
{    
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------
<#+    
}
#>

<#+   
public void BeginNamespace(CodeGenerationTools code, string codeNamespace)
{
    codeNamespace = codeNamespace?.Trim() ?? code.VsNamespaceSuggestion();
    if (!string.IsNullOrWhiteSpace(codeNamespace))
    {
	#>
	
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
	<#+
	PushIndent("    ");
	}
}
#>

<#+
public void EndNamespace(CodeGenerationTools code, string codeNamespace)
{
	codeNamespace = codeNamespace?.Trim() ?? code.VsNamespaceSuggestion();
    if (!string.IsNullOrWhiteSpace(codeNamespace))
    {
        PopIndent();
	#>
}
	<#+
    }
}
#>

<#+
public string ExtraUsingDirectives(string[] extraUsings)
{
    if (extraUsings == null) return string.Empty;
	var sb = new StringBuilder();
	foreach (var extraUsing in extraUsings)
	{
		sb.AppendFormat("using {0};{1}", extraUsing, Environment.NewLine);
	}
	
	return sb.ToString();
}
#>