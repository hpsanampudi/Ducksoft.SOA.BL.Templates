

//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
	
namespace Ducksoft.SOA.BL.Templates.Repositories
{
	using Ninject;
    using System;
    using System.Web.Hosting;
    using Ducksoft.SOA.Common.Contracts;
    using Ducksoft.SOA.Common.MessageHeaders;
    using Ducksoft.SOA.Common.EFHelpers.Models;
    using Ducksoft.SOA.Common.EFHelpers.ConnectedService;
    
    /// <summary>
    /// Interface which is used to query entity set data through xxxDB data service.
    /// </summary>
    public partial interface IxxxDBRepository
    {	
    }
    
    /// <summary>
    /// Class which is used to query entity set data through xxxDB data service.
    /// Note: Search and remove the comment code tags /* ... */ in T4 template
    /// </summary>
    public sealed partial class xxxDBRepository : /*EntityLoader<xxxDBEntities>,*/ IxxxDBRepository
    {
        /// <summary>
        /// Initializes the instance of singleton object of this class.
        /// Note: Static members are 'eagerly initialized', that is, immediately when class is 
        /// loaded for the first time.
        /// .NET guarantees thread safety through lazy initialization
        /// </summary>
        private static readonly Lazy<xxxDBRepository> instance =
            new Lazy<xxxDBRepository>(() => new xxxDBRepository());
    
        /// <summary>
        /// Gets the instance of the singleton object: xxxDBRepository.
        /// </summary>
        /// <value>
        /// The instance.
        /// </value>
        public static xxxDBRepository Instance
        {
            get { return (instance.Value); }
        }
    
        /// <summary>
        /// Gets the data service client.
        /// </summary>
        /// <value>
        /// The client.
        /// </value>
        /*public override xxxDBEntities DataSvcClient
        {
            get
            {
                //Hp --> BugFix: Failed to redirect to user provided db connection.
                //Reason: Since ninject dependency is resolved before we get custom message header 
                //information always it connects to web.config file releated information.
                //Fix: Always check whether data service client information is null (or) not.
                //If null load client on demand by taking connection information from custom header
                //other wise use existing client object.
                if (base.DataSvcClient == null)
                {
                    var urlpath = @"~/Service References/xxxDBDataSvc/ConnectedService.json";
                    var connectSvcPath = HostingEnvironment.MapPath(urlpath);
    
                    Create(new Uri(ConnectedServiceHelper.GetDataSvcUrl(connectSvcPath)),
                        CustomMsgHeaderBuilder.Instance.GetConnectionInfo("xxxDB"));
                }
    
                return (base.DataSvcClient);
            }
        }*/
    
        /// <summary>
        /// Gets or sets the logger.
        /// </summary>
        /// <value>
        /// The logger.
        /// </value>
        [Inject]
    	public ILoggingService Logger {get; set; }	
    
        /// <summary>
        /// Prevents a default instance of the <see cref="xxxDBRepository" /> class from being created.
        /// </summary>
        /// <param name="xxxdbRepository">The xxxDB repository.</param>
        /// <param name="logger">The logger.</param>
        private xxxDBRepository() : base()
        {
        }
    }
}
	
