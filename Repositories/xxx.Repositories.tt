<#@ template language="C#" debug="true" hostspecific="true"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".cs" #>

<#
var code = new CodeGenerationTools(this);
string codeNamespace = code.VsNamespaceSuggestion();

const string appName = "xxxDB";
//const string appName = "";

const string dbName = "xxxDB";
//const string dbName = "";

const string commonNamespace = "Ducksoft.SOA.Common";
//const string commonNamespace = "";

string databaseNamespace = "xxx.SOA.DAL.xxxDB";
//string databaseNamespace = "";

string[] extraUsings = new string[]{"Ninject", "System", "System.Web.Hosting", 
	$"{commonNamespace}.Contracts", $"{commonNamespace}.MessageHeaders", $"{commonNamespace}.EFHelpers.Models",
	$"{commonNamespace}.EFHelpers.ConnectedService"/*, $"{databaseNamespace}.Models"*/}; //or: extraUsings = null;

WriteHeader();
BeginNamespace(code, codeNamespace);
#>
<#=ExtraUsingDirectives(extraUsings)#>
/// <summary>
/// Interface which is used to query entity set data through <#=appName#> data service.
/// </summary>
public partial interface I<#=appName#>Repository
{	
}

/// <summary>
/// Class which is used to query entity set data through <#=appName#> data service.
/// Note: Search and remove the comment code tags /* ... */ in T4 template
/// </summary>
public sealed partial class <#=appName#>Repository : /*EntityLoader<<#=appName#>Entities>,*/ I<#=appName#>Repository
{
    /// <summary>
    /// Initializes the instance of singleton object of this class.
    /// Note: Static members are 'eagerly initialized', that is, immediately when class is 
    /// loaded for the first time.
    /// .NET guarantees thread safety through lazy initialization
    /// </summary>
    private static readonly Lazy<<#=dbName#>Repository> instance =
        new Lazy<<#=dbName#>Repository>(() => new <#=dbName#>Repository());

    /// <summary>
    /// Gets the instance of the singleton object: <#=dbName#>Repository.
    /// </summary>
    /// <value>
    /// The instance.
    /// </value>
    public static <#=dbName#>Repository Instance
    {
        get { return (instance.Value); }
    }

    /// <summary>
    /// Gets the data service client.
    /// </summary>
    /// <value>
    /// The client.
    /// </value>
    /*public override <#=dbName#>Entities DataSvcClient
    {
        get
        {
            //Hp --> BugFix: Failed to redirect to user provided db connection.
            //Reason: Since ninject dependency is resolved before we get custom message header 
            //information always it connects to web.config file releated information.
            //Fix: Always check whether data service client information is null (or) not.
            //If null load client on demand by taking connection information from custom header
            //other wise use existing client object.
            if (base.DataSvcClient == null)
            {
                var urlpath = @"~/Service References/<#=dbName#>DataSvc/ConnectedService.json";
                var connectSvcPath = HostingEnvironment.MapPath(urlpath);

                Create(new Uri(ConnectedServiceHelper.GetDataSvcUrl(connectSvcPath)),
                    CustomMsgHeaderBuilder.Instance.GetConnectionInfo("<#=dbName#>"));
            }

            return (base.DataSvcClient);
        }
    }*/

    /// <summary>
    /// Gets or sets the logger.
    /// </summary>
    /// <value>
    /// The logger.
    /// </value>
    [Inject]
	public ILoggingService Logger {get; set; }	

    /// <summary>
    /// Prevents a default instance of the <see cref="<#=appName#>Repository" /> class from being created.
    /// </summary>
    /// <param name="<#=dbName.ToLower()#>Repository">The <#=dbName#> repository.</param>
    /// <param name="logger">The logger.</param>
    private <#=appName#>Repository() : base()
    {
    }
}
<#
EndNamespace(code, codeNamespace);
#>

<#+
public void WriteHeader()
{    
#>
//------------------------------------------------------------------------------
// <auto-generated>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine1")#>
//
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine2")#>
// <#=CodeGenerationTools.GetResourceString("Template_GeneratedCodeCommentLine3")#>
// </auto-generated>
//------------------------------------------------------------------------------
<#+    
}
#>

<#+   
public void BeginNamespace(CodeGenerationTools code, string codeNamespace)
{
    codeNamespace = codeNamespace?.Trim() ?? code.VsNamespaceSuggestion();
    if (!string.IsNullOrWhiteSpace(codeNamespace))
    {
	#>
	
namespace <#=code.EscapeNamespace(codeNamespace)#>
{
	<#+
	PushIndent("    ");
	}
}
#>

<#+
public void EndNamespace(CodeGenerationTools code, string codeNamespace)
{
	codeNamespace = codeNamespace?.Trim() ?? code.VsNamespaceSuggestion();
    if (!string.IsNullOrWhiteSpace(codeNamespace))
    {
        PopIndent();
	#>
}
	<#+
    }
}
#>

<#+
public string ExtraUsingDirectives(string[] extraUsings)
{
    if (extraUsings == null) return string.Empty;
	var sb = new StringBuilder();
	foreach (var extraUsing in extraUsings)
	{
		sb.AppendFormat("using {0};{1}", extraUsing, Environment.NewLine);
	}
	
	return sb.ToString();
}
#>